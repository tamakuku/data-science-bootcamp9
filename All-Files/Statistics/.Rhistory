}
## end_score print conditions
if ( player_score == com_score )
{ print( "Oh we draw this game, type 'game()' for play again") }
else if (player_score > com_score)
{ print ("Great you win this game, type 'game()' for play again") }
else
{ print ("Hahaha you losed this game, type 'game()' for play again") }
}
game <- function() {
## return score value
player_score <- 0
com_score <- 0
## return RPS value
hands <- c( "hammer", "sisscors", "paper" )
## end score print function
end_score <- function() {
print ( paste ( "player_score",  player_score ) )
print ( paste ( "com_score",  com_score ) )
}
## welcome step
print ( "Yo bro!, welcome into RPS game" )
print ( paste ( "Ok", readline( "What is your name?: " ), "lets play game." ) )
while ( TRUE ) {
## player turn choose
player_hand <- readline ( "Please choose hammer, sisscors, paper or stop: " )
## Stop condition
if ( player_hand == "stop" )
{ print ( end_score() )
break }
## com turn random choose
com_hand <- print ( sample ( hands, 1 ) )
## draw condition
if ( player_hand == com_hand )
{ print ( "Oh We drawed this turn." ) }
## win conditions
else if ( ( player_hand == "hammer" & com_hand == "sisscors" ) |
( player_hand == "sisscors" & com_hand == "paper" ) |
( player_hand == "paper" & com_hand == "hammer" ) )
{ print ( "You win this turn then got 1 score." )
player_score <- player_score + 1 }
## lose condition
else { print( "You losed this turn, I got 1 score." )
com_score <- com_score + 1 }
}
## end_score print conditions
if ( player_score == com_score )
{ print( "Oh we draw this game, type 'game()' for play again") }
else if (player_score > com_score)
{ print ("Great you win this game, type 'game()' for play again") }
else
{ print ("Hahaha you losed this game, type 'game()' for play again") }
}
game <- function() {
## return score value
player_score <- 0
com_score <- 0
## return RPS value
hands <- c( "hammer", "sisscors", "paper" )
## end score print function
end_score <- function() {
print ( paste ( "player_score",  player_score ) )
print ( paste ( "com_score",  com_score ) )
}
## welcome step
print ( "Yo bro!, welcome into RPS game" )
print ( paste ( "Ok", readline( "What is your name?: " ), "lets play game." ) )
while ( TRUE ) {
## player turn choose
player_hand <- readline ( "Please choose hammer, sisscors, paper or stop: " )
## Stop condition
if ( player_hand == "stop" )
{ print ( end_score() )
break }
## com turn random choose
com_hand <- print ( sample ( hands, 1 ) )
## draw condition
if ( player_hand == com_hand )
{ print ( "Oh We drawed this turn." ) }
## win conditions
else if ( ( player_hand == "hammer" & com_hand == "sisscors" ) |
( player_hand == "sisscors" & com_hand == "paper" ) |
( player_hand == "paper" & com_hand == "hammer" ) )
{ print ( "You win this turn then got 1 score." )
player_score <- player_score + 1 }
## lose condition
else { print( "You losed this turn, I got 1 score." )
com_score <- com_score + 1 }
}
## end_score print conditions
if ( player_score == com_score )
{ print( "Oh we draw this game, type 'game()' for play again") }
else if (player_score > com_score)
{ print ("Great you win this game, type 'game()' for play again") }
else
{ print ("Hahaha you losed this game, type 'game()' for play again") }
}
View(flights)
## 3.1 Box plot with 2 Variables
## Qualitative x Quantitative
boxplot(mpg ~ am, data = mtcars)
## change am column to factor before run box plot again
## use data( ) function for return dataframe to original data.
data("mtcars")
## change am column to factor before run box plot again
## use data( ) function for return dataframe to original data.
data(mtcars)
mtcars
mtcars$am <- factor( mtcars$am,
levels = c(0,1),
label = c("Auto", "Manual") )
boxplot(mpg ~ am, data = mtcars)
## change color in boxplot
boxplot(mpg ~ am, data = mtcars,
col = c("gold", "salmon") )
## 4. Scatter plot
## use with 2 Variables in Quantitative
plot(mtcars$hp, mtcars$mpg)
## change icon in scatter plot
plot(mtcars$hp, mtcars$mpg, pch = 16)
## change icon in scatter plot
plot(mtcars$hp, mtcars$mpg, pch = 11)
11)
## change icon in scatter plot
plot(mtcars$hp, mtcars$mpg, pch = 11)
## change icon in scatter plot
plot(mtcars$hp, mtcars$mpg, pch = 15)
## change icon in scatter plot
plot(mtcars$hp, mtcars$mpg, pch = 16)
## then use col( ) change color too
plot(mtcars$hp, mtcars$mpg, pch = 16, col = "red")
cor( mtcars$hp, mtcars$mpg )
lm( mpg ~ hp, data = mtcars )
plot(mtcars$hp, mtcars$mpg,
pch = 16,
col = "red",
main = "tama scatter plot",
xlab = "horse power",
ylab = "miles per gallon")
## input name chart by main + xlab + ylab
plot(mtcars$hp, mtcars$mpg,
pch = 16,
col = "red",
main = "Relationship hp x mpg",
xlab = "horse power",
ylab = "miles per gallon")
## input name chart by main + xlab + ylab
plot(mtcars$hp, mtcars$mpg,
pch = 16,
col = "red",
main = "Relationship hp & mpg",
xlab = "horse power",
ylab = "miles per gallon")
plot(mtcars$hp, mtcars$mpg,
pch = 16,
col = "red",
main = "Relationship hp & mpg",
xlab = "horse power",
ylab = "miles per gallon")
library(tidyverse)
ggplot(data = mtcars,
mapping = aes(x = hp, y = mpg) )
## use ggplot()
ggplot(data = mtcars,
mapping = aes(x = hp, y = mpg) + geom_point() )
ggplot(data = mtcars,
mapping = aes(x = hp, y = mpg) + geom_point() )
ggplot(data = mtcars,
mapping = aes(x = hp, y = mpg) ) + geom_point()
ggplot(data = mtcars,
mapping = aes(x = hp, y = mpg) ) + geom_point() +
geom_smooth()
ggplot(data = mtcars,
mapping = aes(x = hp, y = mpg) ) + geom_point() +
geom_smooth() +
geom_rug()
ggplot(mtcars, aes(hp, mpg)+
geom_point() +
geom_smooth() +
geom_rug() )
ggplot( mtcars, aes(hp, mpg) ) +
geom_point() +
geom_smooth() +
geom_rug()
ggplot( mtcars, aes(hp, mpg) ) +
geom_point()
## change size point
ggplot( mtcars, aes(hp, mpg) ) +
geom_point( size = 3)
## change color in point
ggplot( mtcars, aes(hp, mpg) ) +
geom_point( size = 3, col = "red")
## change gradient point by alpha =
ggplot( mtcars, aes(hp, mpg) ) +
geom_point( size = 3, col = "red", alpha = 0.2)
ggplot( mtacars, aes(hp) ) +
geom_histogram()
ggplot( mtcars, aes(hp) ) +
geom_histogram()
## must use bin = for adjust bar.
ggplot( mtcars, aes(hp) ) +
geom_histogram( bin = 15)
ggplot( mtcars, aes(hp) ) +
geom_histogram( bin = 15)
## must use bin = for adjust bar.
ggplot( mtcars, aes(hp) ) +
geom_histogram( bins = 15)
## must use bins = for adjust bars.
ggplot( mtcars, aes(hp) ) +
geom_histogram( bins = 10)
## change bars color by fill =
ggplot( mtcars, aes(hp) ) +
geom_histogram( bins = 10, fill = "red")
## change gradient bars by alpha =
ggplot( mtcars, aes(hp) ) +
geom_histogram( bins = 10, fill = "red", alpha = 0.2)
## change gradient bars by alpha =
ggplot( mtcars, aes(hp) ) +
geom_histogram( bins = 10, fill = "red", alpha = 0.5)
## use ggplot for Box plot
ggplot(mtcars, aes(hp)) +
geom_boxplot()
layer_plot <- ggplot(mtcars, aes(hp))
layer_plot + geom_boxplot()
layer_plot + geom_histogram()
## make Box plot with 2 Variables
## use "diamonds" dataframe
diamonds
plot <- ggplot(mtcars, aes(hp))
## make Box plot with 2 Variables
## use "diamonds" dataframe
diamonds %>%
count(cut)
ggplot( diamonds, aes(cut)) +
geom_bar()
plot + geom_bar()
ggplot( diamonds, aes(cut)) +
geom_bar()
## change color bars
ggplot( diamonds, aes(cut) ) +
geom_bar( fill = "red")
## change color bars by fill =
ggplot( diamonds, aes(cut) ) +
geom_bar( fill = "lightred")
## change color bars by fill =
ggplot( diamonds, aes(cut) ) +
geom_bar( fill = "red")
## count color column
diamonds %>%
count(color)
ggplot( diamonds, aes( cut, fill(color) ) ) +
geom_bar()
ggplot( diamonds, aes( cut, fill = color ) ) +
geom_bar()
## mapping have to many position style
## 1. position = stacks
ggplot( diamonds, aes( cut, fill = color ) ) +
geom_bar( position = "stacks")
## mapping have to many position style
## 1. position = stacks
ggplot( diamonds, aes( cut, fill = color ) ) +
geom_bar( position = "stack")
ggplot( diamonds, aes( cut, fill = color ) ) +
geom_bar()
## 2. position = "dodge"
ggplot( diamonds, aes( cut, fill = color ) ) +
geom_bar( position = "dodge")
## 3. position = "fill"
ggplot( diamonds, aes( cut, fill = color ) ) +
geom_bar( position = "fill")
diamonds
## make Scatter plot
## find relationship between "carat" and "price"
ggplot( diamonds, aes(carat, price) ) + geom_scatter()
## make Scatter plot
## find relationship between "carat" and "price"
ggplot( diamonds, aes(carat, price) ) + geom_point()
## if have to many data will use long time for render chart
## will use sample for short time
## by sample_n() function
sample_diamonds <- sample_n( diamonds, 5000)
## then make scatter plot with sample Variables again
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
set.seed(42)
sample_lock_diamonds <- sample_n(diamonds, 5000)
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
sample_diamonds <- sample_n( diamonds, 5000)
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
sample_diamonds <- sample_n( diamonds, 5000)
ggplot( sample_diamonds, aes(carat, price) ) +
geom_point()
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_warp( ~color )
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color )
## can change column preview chart by ncol =
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 )
## can change column preview chart by ncol =
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 4 )
## can change column preview chart by ncol =
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 )
## can change column preview chart by ncol =
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 4 )
## can change column preview chart by ncol =
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 )
## can change column preview chart by ncol =
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 4 )
## then input other geom_ for nice Viz as usaully.
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 4 ) +
geom_smooth() +
geom_rug()
## then input other geom_ for nice Viz as usaully.
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 ) +
geom_smooth() +
geom_rug()
## change geom_smooth line type and color
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 ) +
geom_smooth( method = "lm", col = "red") +
geom_rug()
## change background color with theme_minimal
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 ) +
geom_smooth( method = "lm", col = "red") +
geom_rug() +
theme_minimal()
## use labs( ) for intput name labels in charts
ggplot( sample_lock_diamonds, aes(carat, price) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 ) +
geom_smooth( method = "lm", col = "red") +
geom_rug() +
theme_minimal() +
labs( title = "Relationship between carat & price",
x = "carat",
y = "price",
caption = "Source: Diamonds from ggplots package")
ggplot( sample_lock_diamonds, aes(carat, price, col = cut) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 )
### mapping color in to point with cut column
ggplot( sample_lock_diamonds, aes(carat, price, col = cut) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 ) +
theme_minimal()
### mapping color in to point by cut column
ggplot( sample_lock_diamonds, aes(carat, price, col = cut) ) +
geom_point( size = 3, alpha = 0.2) +
facet_wrap( ~color, ncol = 2 ) +
theme_minimal()
### mapping color in to point by cut column
ggplot( sample_lock_diamonds, aes(carat, price, col = cut) ) +
geom_point() +
facet_wrap( ~color, ncol = 2 ) +
theme_minimal()
## then change size and gradient point
ggplot( sample_lock_diamonds, aes(carat, price, col = cut) ) +
geom_point( size = 3, alpha = 0.2) +
facet_wrap( ~color, ncol = 2 ) +
theme_minimal()
source("C:/Users/v_pan/Downloads/Week 8 Stat/Stat Sprint 103/Correlation & Linear Regression in R.R")
setwd("C:/Users/v_pan/Downloads/Bootcamp 9/Week 8 Stat/Stat Sprint 104")
happiness <- c(10, 8, 9, 7, 8, 5, 9, 6 , 8, 7, 1, 1, 3, 1, 4, 5, 6, 3, 2, 0)
divorce <- c( rep(0, 10), rep(1, 10)
divorce
divorce
divorce <- c( rep(0, 10), rep(1, 10) )
divorce
df <- data.frame( happiness, divorce )
## make Full model
glm( divorce ~ happiness, data = df )
## make Full model
glm( divorce ~ happiness, data = df, family = "binomial" )
## make Full model
glm( divorce ~ happiness, data = df, family = "binomial" )
## make Full model
full_model <- glm( divorce ~ happiness, data = df, family = "binomial" )
## find P-value
summary(model)
## find P-value
summary(full_model)
## create probability_divorce and insert in dataframe
df$probability_divorce <- predict( full_model, type = "response" )
df
## recheck new column again
df
## create predicted_divorce column and insert in dataframe
df$predicted_divorce <- ifelse( df$probability_divorce >= 0.5, 1, 0 )
df
## make Confusion Matrix
table( df$predicted_divorce, df$probability_divorce )
df$predicted_divorce <- ifelse( df$probability_divorce >= 0.5, 1, 0 )
## make Confusion Matrix
table( df$predicted_divorce, df$probability_divorce )
df
## make Confusion Matrix
table( df$predicted_divorce, df$divorce )
## make Confusion Matrix table
table( df$predicted_divorce, df$divorce, dnn = c("Predicted", "Actual") )
## make Confusion Matrix table
confusion_matrix <- table( df$predicted_divorce, df$divorce, dnn = c("Predicted", "Actual") )
## Accuracy
( confusion_matrix[1, 1] + confusion_matrix[2, 2] ) / sum( confusion_matrix )
conf_M <- table( df$predicted_divorce, df$divorce, dnn = c("Predicted", "Actual") )
## Accuracy
( conf_M[1, 1] + conf_M[2, 2] ) / sum( conf_M )
## Precision
conf_M[2, 2] / ( conf_M[2, 2] + conf_M[1, 1] )
## Recall
conf_M[2, 2] / ( conf_M[2, 2] + conf_M[2, 1])
## Accuracy
( conf_M[2, 2] + conf_M[1, 1] ) / sum( conf_M )
## Precision
conf_M[2, 2] / ( conf_M[2, 2] + conf_M[1, 1] )
conf_M
conf_M
## Accuracy
( conf_M[2, 2] + conf_M[1, 1] ) / sum( conf_M )
## Precision
conf_M[2, 2] / ( conf_M[2, 2] + conf_M[2, 1] )
## Recall
conf_M[2, 2] / ( conf_M[2, 2] + conf_M[1, 2])
Accuracy <- ( conf_M[2, 2] + conf_M[1, 1] ) / sum( conf_M )
## Precision
Precision <- conf_M[2, 2] / ( conf_M[2, 2] + conf_M[2, 1] )
## Recall
Recall <- conf_M[2, 2] / ( conf_M[2, 2] + conf_M[1, 2])
## F1-Score
F1_Score <- 2 * ( (Precision * Recall) / (Precision + Recall) )
F1_Score
## use cat() print all result
cat( "Accucary:", Accuracy,)
cat( "Accucary:", Accuracy,
"\n Precission:", Precision,
"\n Recall:", Recall,
"\n F1-Score:", F1_Score)
## use cat() print all result
cat( "Accucary:", Accuracy,
"\nPrecission:", Precision,
"\nRecall:", Recall,
"\nF1-Score:", F1_Score)
